#!/usr/bin/env ruby

require 'rubygems'
require 'clamp'
require 'awesome_print'
require 'active_support/all'

require 'mystro/client'

name = File.basename(__FILE__)

def get_client(klass, account=nil)
  s = Mystro.config.server
  a = account || Mystro.config.default_account
  t = Mystro.config.token
  #Mystro::Log.debug "server: '#{s}' account: '#{a}' token: '#{t}'"
  Mystro::Client.new(klass, s, a, t)
end

module Mystro
  class Command < Clamp::Command
    option %w{-a --account}, "ACCOUNT", "the account to filter with", default: nil, environment_variable: "MYSTRO_ACCOUNT"
    option %w{-d --debug}, :flag, "turn on debugging", default: false do |v|
      Mystro::Log.console_debug
    end
    option %w{-q --quiet}, :flag, "turn off uncessary messages", default: false do |v|
      Mystro::Log.console_quiet
    end
    subcommand "ssh", "ssh to server" do
      option %w{-x --user}, "USER", "the user to connect as", default: "ubuntu"
      option %w{-o --options}, "[OPTIONS]", "additional ssh options"
      parameter "PATTERN ...", "name or pattern of server"

      def execute
        client = get_client(:compute, account)
        list = client.search(pattern_list.join(","))

        raise "no servers matched" if list.count == 0
        raise "more than one server found: #{list.map{|e| e["name"]}.join(", ")}" if list.count > 1

        o = list.first
        host =  o["long"] || o["dns"]

        raise "host name not set" unless host

        Mystro::Log.info "connecting as #{user} to #{o["long"] if o["long"]} (#{o["dns"]}) : #{options}"
        exec("ssh #{options} #{user}@#{host}")
      end
    end
    subcommand "csshx", "use csshx to connect to all servers of environment" do
      option %w{-x --user}, "USER", "the user to connect as", default: "ubuntu"
      parameter "PATTERN ...", "name or pattern of servers"

      def execute
        client = get_client(:compute, account)
        list = client.search(pattern_list.join(","))
        puts "servers found: #{list.map{|e| e["name"]}.join(", ")}"
        cmd = "csshx --login #{user} #{list.map {|e| e["long"]||e["dns"]}.join(" ")}"
        puts "cmd: #{cmd}"
        exec(cmd)
      end
    end

    subcommand "compute", "manage computes" do
      self.default_subcommand = "list"
      subcommand "list", "list computes" do
        def execute
          client = get_client(:compute, account)
          list = client.list
          Mystro::Log.warn Mystro::CLI.list(%w{Account Environment Name Roles IP DNS}, list)
        end
      end
      subcommand "search", "list computes" do
        parameter "[PATTERN] ...", "show only matching this pattern"
        def execute
          client = get_client(:compute, account)
          list = client.search(pattern_list.join(","))
          Mystro::Log.warn Mystro::CLI.list(%w{Account Environment Name Roles IP DNS}, list)
        end
      end
    end

    subcommand "balancer", "manage balancers" do
      self.default_subcommand = "list"
      subcommand "list", "list balancers" do
        def execute
          client = get_client(:balancer, account)
          list = client.list
          Mystro::Log.warn Mystro::CLI.list(%{Account Name}, list)
        end
      end
    end

    subcommand "account", "manage accounts" do
      self.default_subcommand = "list"
      subcommand "list", "list accounts" do
        def execute
          ap Mystro.config.to_hash
          client = get_client(:account, account)
          list = client.list
          Mystro::Log.warn Mystro::CLI.list(%w{Name Enabled File}, list)
        end
      end
    end

    subcommand "template", "manage templates" do
      self.default_subcommand = "list"
      subcommand "list", "list templates" do
        def execute
          ap Mystro.config.to_hash
          client = get_client(:template, account)
          list = client.list
          Mystro::Log.warn Mystro::CLI.list(%w{Name Enabled File}, list)
        end
      end
    end

    subcommand "environment", "manage environments" do
      self.default_subcommand = "list"
      subcommand "list", "list environments" do
        def execute
          client = get_client(:environment, account)
          list = client.list
          Mystro::Log.warn Mystro::CLI.list(%w{Deleting Name Template Computes Balancers}, list)
        end
      end

      subcommand "show", "show environment" do
        parameter "name", "id or name of environment"
        def execute
          client = get_client(:environment, account)
          response = client.show(name)
          Mystro::Log.warn Mystro::CLI.show(response) if response && response.count > 0
        end
      end

      subcommand "destroy", "destroy environment" do
        parameter "name", "id or name of environment"
        def execute
          client = get_client(:environment, account)
          env = client.show(name)
          raise "environment not found" unless env["id"]
          response = client.destroy(env["id"])
          if response && response.count > 0
            Mystro::Log.warn Mystro::CLI.show(response)
          end
        end
      end

      subcommand "create", "create environment" do
        parameter "NAME", "the name of the environment"
        parameter "TEMPLATE", "the template to use"
        option %w{-p --protected}, :flag, "set protected flag on environment", default: false

        def execute
          client = get_client(:environment, account)
          response = client.create(name, template, protected?)
          if response && response.count > 0
            Mystro::Log.warn Mystro::CLI.show(response)
          end
        end
      end
    end
  end
end

begin
  Mystro::Plugin.run("commands:loaded", Mystro::Command)
  Mystro::Command.run
rescue => e
  Mystro::Log.error "error: #{e.message}"
  Mystro::Log.debug e
  exit 1
end